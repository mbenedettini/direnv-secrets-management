use flake

export AWS_CONFIG_FILE=${PWD}/.aws-config/config
export AWS_SHARED_CREDENTIALS_FILE=${PWD}/.aws-config/credentials
export AWS_PROFILE=default

# Setup AWS config from template if it doesn't exist
if [ ! -f .aws-config/config ] && [ -f .aws-config/config-template ]; then
    mkdir -p .aws-config
    cp .aws-config/config-template .aws-config/config
fi

check_aws_credentials() {
    if ! aws configure list | grep -q "access_key.*<not set>"; then
        return 0
    fi
    return 1
}

if ! check_aws_credentials; then
    if gum confirm "AWS credentials not found. Would you like to run aws configure?" --default=true; then
        aws configure sso
    fi
fi

# Check if AWS credentials are set and fetch secrets if they are
if check_aws_credentials; then
    echo "# AWS Secrets Manager environment variables" > .envrc-secrets
    echo "# Warning: do not edit, this file is automatically generated by .envrc" >> .envrc-secrets
    
    # Fetch secrets and process them with jq
    aws secretsmanager list-secrets --filters Key="tag-key",Values="dev-env" Key="tag-value",Values="1" | \
      jq -r '.SecretList[] | .Name' | \
    while read secret_name; do
        # Convert secret name to env var name (replace / with _ and uppercase)
        env_var_name=$(echo "$secret_name" | tr '/' '_' | tr '[:lower:]' '[:upper:]')
        
        # Get secret value, extract .password field, and add it to .envrc-secrets
        secret_value=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query 'SecretString' --output text | jq -r '.password')
        echo "export ${env_var_name}='${secret_value}'" >> .envrc-secrets
    done
    
    source_env .envrc-secrets

    echo ">>> AWS secrets fetched and sourced!"
fi
